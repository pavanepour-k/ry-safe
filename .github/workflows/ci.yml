name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin[patchelf] pytest pytest-cov
        pip install -e ".[dev]"

    - name: Run Rust tests
      run: cargo test --verbose

    - name: Run Rust clippy
      run: cargo clippy -- -D warnings

    - name: Check Rust formatting
      run: cargo fmt -- --check

    - name: Build Rust extension
      run: maturin develop

    - name: Run Python tests
      run: pytest tests/ -v --cov=rysafe --cov-report=xml

    - name: Run comprehensive test
      run: python test_comprehensive.py

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy types-setuptools

    - name: Run ruff
      run: ruff check src/

    - name: Check black formatting
      run: black src/ --check --diff

    - name: Run mypy
      run: mypy src/rysafe/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install safety
      run: pip install safety

    - name: Run safety check
      run: safety check

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin
        pip install -e ".[dev]"

    - name: Build documentation
      run: |
        # Add documentation building here when ready
        echo "Documentation check placeholder"

    - name: Check README examples
      run: |
        # Extract and test code examples from README
        python -c "
        import rysafe
        # Basic escaping test from README
        dangerous = '<script>alert(\"xss\")</script>'
        safe = rysafe.escape(dangerous)
        expected = '&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;'
        assert str(safe) == expected, f'Expected {expected}, got {safe}'
        print('âœ“ README examples work correctly')
        "