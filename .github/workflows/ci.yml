name: CI/CD Pipeline

on:
  push:
    branches: [ main, test ]
  pull_request:
    branches: [ main, test ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust formatting and linting
  rust-quality:
    name: Rust Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.87.0
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check Rust formatting
      run: cargo fmt --check
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  # Rust testing
  rust-test:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.70.0, stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
    
    - name: Run Rust tests
      run: cargo test --verbose
    
    - name: Run Rust tests with release mode
      run: cargo test --release --verbose

  # Python setup and testing
  python-test:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.87.0
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-python${{ matrix.python-version }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-python${{ matrix.python-version }}-cargo-
    
    - name: Install maturin and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin[patchelf] pytest pytest-cov black ruff mypy
        pip install fastapi httpx  # For FastAPI tests
    
    - name: Build Python extension
      run: maturin develop --release
    
    - name: Run Python tests
      run: |
        pytest tests/ -v --cov=rysafe --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}

  # Python code quality
  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
        pip install fastapi httpx  # For type checking
    
    - name: Check Python formatting with Black
      run: black --check python_bindings/ tests/
    
    - name: Lint with Ruff
      run: ruff check python_bindings/ tests/
    
    - name: Type check with MyPy
      run: mypy python_bindings/ --ignore-missing-imports

  # Benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-bench-cargo-
    
    - name: Run benchmarks
      run: cargo bench --bench escape_benchmarks -- --output-format html
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/
        retention-days: 30

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  # Build wheels for distribution
  build-wheels:
    name: Build Wheels
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.87.0
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build wheels
      run: maturin build --release --strip --out dist
    
    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: dist/

  # Build source distribution
  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.87.0
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build source distribution
      run: maturin sdist --out dist
    
    - name: Upload source distribution
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/

  # Test installation of built wheels
  test-wheels:
    name: Test Wheel Installation
    runs-on: ${{ matrix.os }}
    needs: [build-wheels]
    if: github.event_name == 'release'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: dist/
    
    - name: Install wheel
      run: |
        pip install --find-links dist rysafe
        python -c "import rysafe; print(rysafe.escape('<test>'))"
    
    - name: Test basic functionality
      run: |
        python -c "
        from rysafe import escape, unescape
        assert escape('<script>') == '&lt;script&gt;'
        assert unescape('&lt;script&gt;') == '<script>'
        print('Basic functionality test passed!')
        "

  # Publish to PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [rust-quality, rust-test, python-test, python-quality, test-wheels]
    if: github.event_name == 'release'
    environment: release
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install twine
      run: pip install twine
    
    - name: Combine distributions
      run: |
        mkdir -p final-dist/
        cp wheels-ubuntu-latest/* final-dist/ || true
        cp wheels-windows-latest/* final-dist/ || true
        cp wheels-macos-latest/* final-dist/ || true
        cp sdist/* final-dist/ || true
        ls -la final-dist/
    
    - name: Check distributions
      run: twine check final-dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload final-dist/*

  # Documentation deployment
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Generate Rust docs
      run: cargo doc --no-deps --document-private-items
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: target/doc
        destination_dir: rust-docs

  # Integration tests with real applications
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.87.0
    
    - name: Install dependencies
      run: |
        pip install maturin fastapi uvicorn httpx pytest
    
    - name: Build and install package
      run: maturin develop --release
    
    - name: Test FastAPI integration
      run: |
        # Create a simple FastAPI app for testing
        cat > test_app.py << 'EOF'
        from fastapi import FastAPI, Depends
        from rysafe.fastapi_plugin import get_escaper
        
        app = FastAPI()
        
        @app.post("/escape")
        def escape_endpoint(text: str, escape_fn=Depends(get_escaper)):
            return {"escaped": escape_fn(text)}
        
        if __name__ == "__main__":
            import uvicorn
            uvicorn.run(app, host="0.0.0.0", port=8000)
        EOF
        
        # Test the app
        python -c "
        import sys
        sys.path.append('.')
        from test_app import app
        from fastapi.testclient import TestClient
        
        client = TestClient(app)
        response = client.post('/escape?text=<script>alert(\"xss\")</script>')
        assert response.status_code == 200
        data = response.json()
        assert '&lt;script&gt;' in data['escaped']
        print('FastAPI integration test passed!')
        "

  # Compatibility tests with MarkupSafe
  compatibility-tests:
    name: MarkupSafe Compatibility
    runs-on: ubuntu-latest
    needs: [python-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.87.0
    
    - name: Install dependencies
      run: |
        pip install maturin markupsafe pytest
    
    - name: Build and install package
      run: maturin develop --release
    
    - name: Run compatibility tests
      run: |
        python -c "
        import markupsafe
        import rysafe
        
        test_cases = [
            '<script>alert(\"xss\")</script>',
            '\"quoted string\"',
            \"'single quoted'\",
            'R&D department',
            '<b>bold</b> & <i>italic</i>',
            '',
            'safe text',
        ]
        
        for case in test_cases:
            ms_result = str(markupsafe.escape(case))
            rs_result = rysafe.escape(case)
            
            if ms_result != rs_result:
                print(f'MISMATCH for \"{case}\":')
                print(f'  MarkupSafe: {ms_result}')
                print(f'  rysafe: {rs_result}')
            else:
                print(f'✓ {case}')
        
        print('Compatibility tests completed!')
        "